#
#  A part of Lorica.
#  Copyright (C) 2007-2009 OMC Denmark ApS.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.

# This file was originally generated by MPC.
#
# MPC Command:
# mwc.pl -type automake lorica.mwc

CWD = $(CURDIR)

if HAVE_ACE_ROOT
ACE_ROOT = $(CONF_ACE_ROOT)
TAO_ROOT = $(ACE_ROOT)/TAO
PATH = $(ACE_ROOT)/bin:$(ENV_PATH)

if LORICA_SHARED_LIBS
LORICA_SHARED_LIBS_PATH = $(LORICA_top_dir)/src/OCI/.libs:$(LORICA_top_dir)/src/lorica/.libs
else
LORICA_SHARED_LIBS_PATH = 
endif

if LORICA_DARWIN
export DYLD_LIBRARY_PATH = $(ACE_ROOT)/lib:$(ENV_DYLD_LIBRARY_PATH):$(LORICA_SHARED_LIBS_PATH)
else
export LD_LIBRARY_PATH = $(ACE_ROOT)/lib:$(ENV_LD_LIBRARY_PATH):$(LORICA_SHARED_LIBS_PATH)
endif
endif # HAVE_ACE_ROOT

# From the Brutus Server repository
IFR_BRUTUS_CACHE_FILE = $(LORICA_top_dir)/support_files/brutus/ifr.cache
CLIENT_CONF_FILE = $(LORICA_top_dir)/support_files/brutus/lorica.conf.client
CLIENT_SVC_FILE = $(LORICA_top_dir)/support_files/brutus/lorica_codeset.conf

include $(CONF_ACE_ROOT)/include/makeinclude/macros.GNU
include $(CONF_ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

sbin_PROGRAMS = lorica

lorica_CPPFLAGS = \
	$(LORICA_CXXFLAGS) \
	$(LORICA_CPPFLAGS) \
	-DACE_HAS_SSL=1

lorica_SOURCES =  \
	ReferenceMapper_i.cpp \
	main.cpp              \
	Win32_svc_loader.cpp  \
	UNIX_svc_loader.cpp   \
	svc_loader_base.cpp   \
	ntsvc.cpp             \
	proxy.cpp             \
	ReferenceMapper_i.h   \
	Win32_svc_loader.h    \
	UNIX_svc_loader.h     \
	svc_loader_base.h     \
	ntsvc.h               \
	proxy.h

if LORICA_STATIC
    STATIC_FLAGS = -static
else
    STATIC_FLAGS =
endif

lorica_LDFLAGS = $(STATIC_FLAGS)

if LORICA_SHARED_LIBS
LORICA_LIBS = \
	-llorica_EvaluatorBase    \
	-llorica_GenericEvaluator \
	-llorica_Client           \
	-lOCI_AsynchProxyTools
lorica_LDFLAGS += -L$(LORICA_top_dir)/src/OCI/.libs -L$(LORICA_top_dir)/src/lorica/.libs
else
LORICA_LIBS = \
	$(LORICA_top_dir)/src/lorica/liblorica_EvaluatorBase.la    \
	$(LORICA_top_dir)/src/lorica/liblorica_GenericEvaluator.la \
	$(LORICA_top_dir)/src/lorica/liblorica_Client.la           \
	$(LORICA_top_dir)/src/OCI/libOCI_AsynchProxyTools.la
endif

lorica_LDADD = \
	$(LORICA_LIBS)         \
	-lTAO_BiDirGIOP        \
	-lTAO_IFRService       \
	-lTAO_Svc_Utils        \
	-lTAO_DynamicInterface \
	-lTAO_EndpointPolicy   \
	-lTAO_Messaging        \
	-lTAO_IORTable         \
	-lTAO_SSLIOP           \
	-lTAO_PI_Server        \
	-lACE_SSL              \
	-lTAO_Security         \
	-lTAO_PI               \
	-lTAO_CodecFactory     \
	-lTAO_PortableServer   \
	-lTAO_TypeCodeFactory  \
	-lTAO_IFR_Client       \
	-lTAO_DynamicAny       \
	-lTAO_Valuetype        \
	-lTAO_AnyTypeCode      \
	-lTAO_Codeset          \
	-lTAO                  \
	-lACE

# Only ever entered if we need to install ACE+TAO
if LORICA_MUST_INSTALL_ACETAO

if HAVE_ACE_ROOT
if LORICA_DARWIN
TAO_LIBS = \
	$(ACE_ROOT)/ace/libACE.dylib                            \
	$(ACE_ROOT)/ace/SSL/libACE_SSL.dylib                    \
	$(ACE_ROOT)/TAO/tao/libTAO_Codeset.dylib                \
	$(ACE_ROOT)/TAO/tao/libTAO_AnyTypeCode.dylib            \
	$(ACE_ROOT)/TAO/tao/libTAO_CodecFactory.dylib           \
	$(ACE_ROOT)/TAO/tao/libTAO_DynamicAny.dylib             \
	$(ACE_ROOT)/TAO/tao/libTAO_DynamicInterface.dylib       \
	$(ACE_ROOT)/TAO/tao/libTAO_EndpointPolicy.dylib         \
	$(ACE_ROOT)/TAO/TAO_IDL/libTAO_IDL_BE.dylib             \
	$(ACE_ROOT)/TAO/TAO_IDL/libTAO_IDL_FE.dylib             \
	$(ACE_ROOT)/TAO/orbsvcs/IFR_Service/libTAO_IFR_BE.dylib \
	$(ACE_ROOT)/TAO/tao/libTAO_IFR_Client.dylib             \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_IFRService.dylib \
	$(ACE_ROOT)/TAO/tao/libTAO_ImR_Client.dylib             \
	$(ACE_ROOT)/TAO/tao/libTAO_IORTable.dylib               \
	$(ACE_ROOT)/TAO/tao/libTAO_Messaging.dylib              \
	$(ACE_ROOT)/TAO/tao/libTAO_PI_Server.dylib              \
	$(ACE_ROOT)/TAO/tao/libTAO_PI.dylib                     \
	$(ACE_ROOT)/TAO/tao/libTAO_PortableServer.dylib         \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_Security.dylib   \
	$(ACE_ROOT)/TAO/tao/libTAO.dylib                        \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_SSLIOP.dylib     \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_Svc_Utils.dylib  \
	$(ACE_ROOT)/TAO/tao/libTAO_TypeCodeFactory.dylib        \
	$(ACE_ROOT)/TAO/tao/libTAO_Valuetype.dylib              \
	$(ACE_ROOT)/TAO/tao/libTAO_BiDirGIOP.dylib
else # !LORICA_DARWIN
TAO_LIBS = \
	$(ACE_ROOT)/ace/libACE.so.$(LIBACE_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                            \
	$(ACE_ROOT)/ace/SSL/libACE_SSL.so.$(LIBACE_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                    \
	$(ACE_ROOT)/TAO/tao/libTAO_Codeset.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                \
	$(ACE_ROOT)/TAO/tao/libTAO_AnyTypeCode.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)            \
	$(ACE_ROOT)/TAO/tao/libTAO_CodecFactory.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)           \
	$(ACE_ROOT)/TAO/tao/libTAO_DynamicAny.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)             \
	$(ACE_ROOT)/TAO/tao/libTAO_DynamicInterface.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)       \
	$(ACE_ROOT)/TAO/tao/libTAO_EndpointPolicy.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)         \
	$(ACE_ROOT)/TAO/TAO_IDL/libTAO_IDL_BE.so.5.$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                             \
	$(ACE_ROOT)/TAO/TAO_IDL/libTAO_IDL_FE.so.5.$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                             \
	$(ACE_ROOT)/TAO/orbsvcs/IFR_Service/libTAO_IFR_BE.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE) \
	$(ACE_ROOT)/TAO/tao/libTAO_IFR_Client.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)             \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_IFRService.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE) \
	$(ACE_ROOT)/TAO/tao/libTAO_ImR_Client.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)             \
	$(ACE_ROOT)/TAO/tao/libTAO_IORTable.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)               \
	$(ACE_ROOT)/TAO/tao/libTAO_Messaging.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)              \
	$(ACE_ROOT)/TAO/tao/libTAO_PI_Server.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)              \
	$(ACE_ROOT)/TAO/tao/libTAO_PI.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                     \
	$(ACE_ROOT)/TAO/tao/libTAO_PortableServer.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)         \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_Security.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)   \
	$(ACE_ROOT)/TAO/tao/libTAO.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                        \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_SSLIOP.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)     \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_Svc_Utils.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)  \
	$(ACE_ROOT)/TAO/tao/libTAO_TypeCodeFactory.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)        \
	$(ACE_ROOT)/TAO/tao/libTAO_Valuetype.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)              \
	$(ACE_ROOT)/TAO/tao/libTAO_BiDirGIOP.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)
endif # !LORICA_DARWIN

ACETAO_LIBdir = $(libdir)
ACETAO_LIB_DATA = $(TAO_LIBS)

$(ACE_ROOT)/TAO/orbsvcs/IFR_Service/tao_ifr:

TAO_EXECUTABLES = \
	$(ACE_ROOT)/TAO/orbsvcs/IFR_Service/tao_ifr

TAO_EXECUTABLESdir = ${bindir}
TAO_EXECUTABLES_DATA = $(TAO_EXECUTABLES)

install-data-hook:
	chmod 755 $(DESTDIR)$(bindir)/tao_ifr
if !LORICA_DARWIN
	cd $(DESTDIR)$(libdir) && $(LN_S) libACE.so.$(LIBACE_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                  libACE.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libACE_SSL.so.$(LIBACE_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)              libACE_SSL.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_Codeset.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)          libTAO_Codeset.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_AnyTypeCode.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)      libTAO_AnyTypeCode.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_CodecFactory.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)     libTAO_CodecFactory.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_DynamicAny.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)       libTAO_DynamicAny.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_DynamicInterface.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE) libTAO_DynamicInterface.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_EndpointPolicy.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)   libTAO_EndpointPolicy.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_IDL_BE.so.5.$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                           libTAO_IDL_BE.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_IDL_FE.so.5.$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                           libTAO_IDL_FE.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_IFR_BE.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)           libTAO_IFR_BE.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_IFR_Client.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)       libTAO_IFR_Client.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_IFRService.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)       libTAO_IFRService.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_ImR_Client.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)       libTAO_ImR_Client.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_IORTable.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)         libTAO_IORTable.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_Messaging.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)        libTAO_Messaging.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_PI_Server.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)        libTAO_PI_Server.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_PI.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)               libTAO_PI.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_PortableServer.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)   libTAO_PortableServer.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_Security.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)         libTAO_Security.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                  libTAO.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_SSLIOP.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)           libTAO_SSLIOP.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_Svc_Utils.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)        libTAO_Svc_Utils.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_TypeCodeFactory.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)  libTAO_TypeCodeFactory.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_Valuetype.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)        libTAO_Valuetype.so
	cd $(DESTDIR)$(libdir) && $(LN_S) libTAO_BiDirGIOP.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)        libTAO_BiDirGIOP.so
endif # !LORICA_DARWIN

endif # HAVE_ACE_ROOT

endif # LORICA_MUST_INSTALL_ACETAO

$(LORICA_top_dir)/lorica.conf:
	cp $(CLIENT_CONF_FILE) $@

$(LORICA_top_dir)/lorica_codeset.conf:
	cp $(CLIENT_SVC_FILE) $@

$(LORICA_top_dir)/ifr.cache:
	cp $(IFR_BRUTUS_CACHE_FILE) $@ 

BRUTUS_IFR_CACHEdir = $(LORICA_CACHE_DIR)

BRUTUS_IFR_CACHE_DATA = $(LORICA_top_dir)/ifr.cache

lorica.ssliop:

sysconf_DATA = \
	$(LORICA_top_dir)/lorica.conf \
	$(LORICA_top_dir)/lorica_codeset.conf \
	lorica.ssliop


if THIS_IS_NOT_A_DISTRIBUTION
CLEAN_IN_FILES = Makefile.in
else
CLEAN_IN_FILES =
endif

DISTCLEANFILES = $(CWD)/*.o $(CLEAN_IN_FILES) Makefile .deps .libs .obj lorica lorica.ior lorica.pid $(LORICA_top_dir)/lorica.conf $(LORICA_top_dir)/lorica_codeset.conf $(LORICA_top_dir)/ifr.cache
CLEANFILES = $(CWD)/*.o 
